apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion Constants.compileSdkVersion
    buildToolsVersion Constants.buildToolsVersion

    defaultConfig {
        applicationId(Constants.applicationId)
        minSdkVersion(Constants.minSdkVersion)
        targetSdkVersion(Constants.targetSdkVersion)
        versionCode(Constants.versionCode)
        versionName(Constants.versionName)
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility "1.8"
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation(Libraries.kotlin)
    implementation(Libraries.coroutinesCore)
    implementation(Libraries.coroutines)
    implementation(Libraries.constraintLayout)
    testImplementation(Libraries.Junit)
    implementation(Libraries.lifeCycleExtensions)
    implementation(Libraries.viewModelKtx)
    implementation(Libraries.androidXCore)
    implementation(Libraries.fragmentKtx)
    implementation(Libraries.fragmentNavigation)
    implementation(Libraries.lifecycleLiveData)
    implementation('androidx.appcompat:appcompat:1.2.0')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    androidTestImplementation('androidx.test.ext:junit:1.1.2')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0')

    implementation project(':data')
    implementation project(':domain')
    implementation project(':cache')
    implementation project(':remote')
    implementation project(':presentation')

    implementation(Libraries.timberVersion)
    implementation(Libraries.javaxInject)
    implementation(Cache.room)
    kapt(Cache.roomCompiler)
    implementation(Cache.roomCoroutines)

    implementation(Network.retrofit)
    implementation(Network.retrofitGson)
    implementation(Network.loggingInterceptor)
    implementation(Network.okHttp)
    implementation(Network.retrofitScalars)
//
//        def fragment_ktx = "1.3.0"
//        implementation "androidx.fragment:fragment-ktx:$fragment_ktx"

//
//        def retrofit = "2.9.0"
//        implementation "com.squareup.retrofit2:retrofit:$retrofit"
//        implementation "com.squareup.retrofit2:converter-gson:$retrofit"
//        implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"
//
//        // Kotlin
//        def nav_version = "2.3.0"
//        implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
//        implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
//
//        def hilt_version = "2.28-alpha"
//        implementation "com.google.dagger:hilt-android:$hilt_version"
//        kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
//
//        // DAGGER HILT AND VIEW MODEL
//        def hilt_viewmodels = "1.0.0-alpha01"
//        implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_viewmodels"
//        kapt "androidx.hilt:hilt-compiler:$hilt_viewmodels"

    // MATERIAL DESIGN
    implementation(Libraries.materialDesign)

    // VIEW PAGER 2
    implementation(Libraries.viewPager2)

    // CHROME EXTENSION FOR VIEWING DATABASE
    implementation('com.facebook.stetho:stetho:1.5.1')

    // IMAGE LOADING
    implementation(Libraries.glideVersion)
    kapt(Libraries.glideCompiler)

    // SEARCH_VIEW
    implementation(Libraries.materialSearchView)

    // WorkManager
    implementation(Libraries.workManager)

    implementation(Libraries.hiltAndroid)
    kapt(Libraries.hiltAndroidCompiler)
    implementation(Libraries.hiltWorker)

    // When using Kotlin.
    kapt(Libraries.hiltWorkerCompiler)
    implementation(Libraries.hiltViewModel)
    kapt(Libraries.hiltViewModelCompiler)


}